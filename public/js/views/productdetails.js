window.ProductView = Backbone.View.extend({

    whoami:'ProductView:productdetails',

    initialize: function () {
        this.relatedController = dao.productViewFactory({product:this.model, chselector:'#chapters1',anselector:'#ancestor1',notasselector:'#notas1',brandingselector:'#brandingaccordion',asselector:'#assets1', context:this.el});
        this.renderall();
    },

    renderall: function(){
        this.render();
        this.renderChilds();
        this.renderAncestors();
        this.renderAssets();
        this.renderNotas();
        this.renderBranding();
    },

    render: function () {
        $(this.el).html(this.template(this.model.toJSON()));
        return this;
    },

    renderChilds: function () {
        this.relatedController.chrender();
        return this;
    },

    renderAssets: function () {
        this.relatedController.asrender();
        return this;
    },

    renderAncestors: function () {
        this.relatedController.anrender();
        return this;
    },

    renderNotas: function () {
        this.relatedController.notasrender();
        return this;
    },

    renderBranding: function () {
        this.relatedController.brandingrender();
        console.log('renderbrandig: spec.brands: [%s]', this.relatedController.getBrands().length);
        return this;
    },
    /**
     * Scope of events: Events declared in a view use the viewâ€™s `el` element to wire up the events. 
     * Since the `el` in this example is being generated by the view, as a `ul` tag, 
     * the click event is wired up to all of the <a> tags in each of the <li> tags.     
    */

    events: {
        "change .core"       : "change",
        "click .testview"    : "testview",
        "click .paclasif"    : "formpaclasification",
        "click .padatospro"  : "formpatechfacet",
        "click .capitulos"   : "formpacapitulos",
        "click .painstancia" : "formaddinstance",
        "click .branding"    : "formbranding",
        "click .parealiz"    : "formparealization",
        "click .notas"       : "formnotas",
        "click .intechfacet" : "formintechfacet",
        "click .save"       : "beforeSave",
        "click .delete"     : "deleteNode",
        "click .clonar"     : "clone",
        "click .eventos"    : "eventos",
        "click .browse"     : "browse",
        "click .vistacarousel" : "vistacarousel",
        "click .vistainfo"   : "vistainfo",

        "click .uploadcontent"  : "instanceUploadFiles",
        "click .discardcontent" : "discardcontent",
        "click .addnewinstance" : "addnewinstance",
        "click .cancelinstance" : "cancelinstance",

        "click .uploadbrnd"  : "brandingUploadFiles",
        "click .discardbrnd" : "discardbrnd",
        "click .addnewbrnd"  : "addnewbrnd",
        "click .cancelbrnd"  : "cancelbranding",
        "click .ptecnico"    : "altaptecnico",

        "dragover #filesdrop" : "dragoverHandler",
        "dragover #brnddrop"  : "dragoverHandler",
        "drop #filesdrop"     : "instanceDropHandler",
        "drop #brnddrop"      : "brandingDropHandler",

    },

    formbranding: function () {
        var self = this,
            facet = dao.brandingfacet.init(this.model),
            form = new Backbone.Form({
                model: facet,
            }).render();

        console.log('[%s] form-branding BEGINS',self.whoami);
        dao.brandingfacet.setForm(form);
        
        form.on('change', function(form) {
            var errors = form.commit();
            console.log('form change!!:key editor');
        });

        form.on('blur', function(form) {
            var errors = form.commit();
            console.log('form blur!!:KEY editor');
        });
        $('.brandinghook').html(form.el); 
    },

    cancelinstance: function () {
        console.log('[%s] cancelinstance BEGINS toglle',this.whoami);
        //$('#collapseOne').toggleClass('in');
        $('#collapseOne').collapse('toggle');
        return false;
    },

    cancelbranding: function () {
        console.log('[%s] cancelbranding BEGINS toglle',this.whoami);
        //$('#collapseOne').toggleClass('in');
        $('#collapseBrnd').collapse('toggle');
        return false;
    },

    discardcontent: function () {
        this.discard('.instancedropped')
        return false;
    },
    discardbrnd: function () {
        this.discard('.brnddropped')
        return false;
    },
    discard: function (target) {
        this.loadedfiles += 1;
        this.showFilesDropped(target);
    },

    addnewinstance: function () {
        var self = this, 
            productmodel = this.model,
            content = dao.addinstancefacet.getContent(),
            asset = dao.addinstancefacet.getAsset();


        if(!dao.addinstancefacet.getAsset() && content.url){
            console.log('alta de instancia SIN asset, pero CON url');
            //mgo1
            var data = {
                name: content.slug,
                slug: content.slug,
                denom: content.tipoarchivo,
                urlpath: content.url,
                type: content.tipoproducto,
                versions:[{
                    name: content.slug,
                    urlpath: content.url,
                    type: content.tipoproducto,
                    uploadDate: new Date().getTime()
                }]
            };
            var nasset = new Asset(data);
             nasset.save(null, {
                success: function (model) {
                    console.log('addNewInstance: Success nasset created!');
                    self.processnewinstance(self, productmodel, content, nasset);
                },
                error: function () {
                    console.log('An error occurred while trying to delete this item');
               }
            });
        }else {
            console.log('alta de instancia CON asset');
            self.processnewinstance(self, productmodel, content, asset);
        }
        return false;
    },
    processnewinstance: function (self, product, content, asset) {
        console.log('[%s] addnewinstance BEGINS',this.whoami);
        product.insertInstance(content,asset,function(){
            dao.addinstancefacet.reset();
            console.log('addnewinstance, ready to RELOAD CHAPTERS [%s]','productos/' + product.id);
            self.beforeSave();
            self.renderChilds();
            //utils.approuter.navigate('productos/' + product.id, {trigger: true, replace: false});
        });
        return false;
    },

    altaptecnico: function(){
        this.model.createNewPtecnico(function(err,docum){
            window.open('/gestion/#comprobantes/'+docum.id+'/edit');
            return false;
        });
    },

    addnewbrnd: function () {
        var productmodel = this.model;
        console.log('[%s] add branding BEGINS',this.whoami);

        productmodel.insertBranding(dao.brandingfacet.getContent(),dao.brandingfacet.getAsset());
        this.beforeSave();
        return false;
    },

    testview: function(){
        console.log('ProductView:productdetails: CLICK');
    },

    dragoverHandler: function (event) {
        var e = event.originalEvent;
        e.stopPropagation();
        e.preventDefault();
        //console.log('[%s] dragoverHandler BEGINS',this.whoami);
    },

    brandingDropHandler: function (event) {
        var self = this;
        console.log('[%s] BRANDING dropHandler BEGINS',this.whoami);
        var progressbar = '#brndprogressbar';
        this.dropHandler(event, progressbar);
        var target = '.brnddropped';
        this.showFilesDropped(target);
        return false;
    },

    instanceDropHandler: function (event) {
        var self = this;
        console.log('[%s] INSTANCE dropHandler BEGINS',this.whoami);
        var progressbar = '#instanceprogressbar';
        this.dropHandler(event, progressbar);
        var target = '.instancedropped';
        this.showFilesDropped(target);
        return false;
    },

    showFilesDropped: function(target){
        var self = this;
        var showFiles = _.template('<div><strong><%=name%></strong>: [<%=index%>]  [<%=type%>]  /  [<%=size%>]</div>');
       $(target).html('');
        _.each(this.uploadingfiles,function(element,index){
            if(index >= self.loadedfiles){
                console.log('show files [%s] [%s] [%s]',index,self.loadedfiles,index == self.loadedfiles);
                $(target).append(showFiles({index:index,name:element.name, type:element.type, size:element.size }));
            }
        });
    },
    
    dropHandler: function (event, progressbar) {
        console.log('[%s] dropHandler BEGINS',this.whoami);
        var e = event.originalEvent;
        e.stopPropagation();
        e.preventDefault();
 
        e.dataTransfer.dropEffect = 'copy';
        this.uploadingfiles = e.dataTransfer.files;
        this.loadedfiles = 0;

        $(progressbar).css({'width':'0%;'});
        console.log('[%s] dropHandler upload BEGINS files:[%s] array:[%s]',this.whoami, this.uploadingfiles.length,_.isObject(this.uploadingfiles));
        return false;
    },

    brandingUploadFiles: function (event) {
        var self = this;
        var progressbar = '#brndprogressbar';
        var loaded= '#brndloaded';
        var dropped= '.brnddropped';

        console.log('[%s] BRANDING uploadFiles BEGINS folder:',self.whoami);
 
        if(!self.uploadingfiles) return false;
        if(self.uploadingfiles.length <= self.loadedfiles) return false;
 
        dao.uploadFile(self.uploadingfiles[self.loadedfiles],progressbar,function(srvresponse, asset){
            var filelink = 'Archivo subido:['+srvresponse.fileversion.type+'] <a href="'+srvresponse.urlpath+'" >'+srvresponse.name+'</a>'
            $(loaded).html(filelink);
            $(progressbar).css({'width':'100%;'});

            console.log('uploaded SUCCESS: [%S]',filelink);

            self.loadedfiles += 1;
            self.uploadedfile = srvresponse;
            dao.brandingfacet.setAsset(asset);

            self.showFilesDropped(dropped);
            asset.linkChildsToAncestor(asset, self.model,'es_asset_de',function(){
                console.log('ASSET linked to ancestor');
            });
            //
            utils.showAlert('Success', 'Asset uploaded!', 'alert-success');
            console.log('update form: [%s]',srvresponse.name);    
        });

        return false;
    },

    instanceUploadFiles: function (event) {
        var self = this;
        var progressbar = '#instanceprogressbar';
        var loaded= '#instanceuploaded';
        var dropped= '.instancedropped';

        console.log('[%s] BRANDING uploadFiles BEGINS folder:',self.whoami);
 
        if(!self.uploadingfiles) return false;
        if(self.uploadingfiles.length <= self.loadedfiles) return false;
 
        dao.uploadFile(self.uploadingfiles[self.loadedfiles], progressbar, function(srvresponse, asset){
            var filelink = 'Archivo subido:['+srvresponse.fileversion.type+'] <a href="'+srvresponse.urlpath+'" >'+srvresponse.name+'</a>'
            $(loaded).html(filelink);
            $(progressbar).css({'width':'100%;'});

            console.log('uploaded SUCCESS: [%S]',filelink);

            self.loadedfiles += 1;
            self.uploadedfile = srvresponse;
            dao.addinstancefacet.setContent({slug:srvresponse.name, tipoarchivo:srvresponse.fileversion.type});
            dao.addinstancefacet.setAsset(asset);

            self.showFilesDropped(dropped);

            utils.showAlert('Success', 'Asset uploaded!', 'alert-success');
            console.log('update form: [%s]',srvresponse.name);    
        });

        return false;
    },


    change: function (event) {
        /**
         *  event:
         *   event.target.name: model property
         *   event.target.value: model value
         *   event.target.id model key
         *  
         *   this.model.set( {prop1:newValue1, prop2,newValue2 }  )
         */

        // Remove any existing alert message
        utils.hideAlert();

        // Apply the change to the model
        var target = event.target;
        var change = {};
        change[target.name] = target.value;
        this.model.set(change);
        //utils.showAlert('Success!', 'name:['+target.name+'] value:['+target.value+'] key:['+target.id+']', 'alert-success');

        // Run validation rule (if any) on changed item
        var check = this.model.validateItem(target.id);
        if (check.isValid === false) {
            utils.addValidationError(target.id, check.message);
        } else {
           utils.removeValidationError(target.id);
        }
    },

    beforeSave: function () {
        //console.log('beforeSave:productdetails BEGIN');
        var self = this;
        var check = this.model.validateAll();
        //console.log('beforeSave:productdetails validateAll ok');

        if (check.isValid === false) {
            utils.displayValidationErrors(check.messages);
            return false;
        }

        //console.log('beforeSave:productdetails SAVING NOW');
        this.saveNode();
        return false;
    },

    saveNode: function () {
        console.log('saveNode:productdetails begins');
        var self = this;
        // builds taglist array
        self.model.buildTagList();
        //
        this.model.save(null, {
            success: function (model) {
                //console.log('saveNode:productdetails success');
                app.navigate('productos/' + model.id, false);
                self.renderall();
                utils.showAlert('Exito!', 'El nodo se actualizÃ³ correctamente', 'alert-success');
            },
            error: function () {
                utils.showAlert('Error', 'OcurriÃ³ un error al intentar actualizar este nodo', 'alert-error');
            }
        });
    },

    deleteNode: function () {
        this.model.destroy({
            success: function () {
                alert('El nodo se eliminÃ³ correctamente');
                window.history.back();
            }
        });
        return false;
    },

    clone: function () {
        var self = this;
        var check = this.model.validateAll();
        if (check.isValid === false) {
            utils.displayValidationErrors(check.messages);
            return false;
        }
        app.navigate('productos/add', false);
        this.model.unset('id',{ silent : true });
        this.model.unset('_id',{ silent : true });
        this.saveNode();
        return false;
    },

    vistacarousel: function () {
        window.open('/bacua/carousel/#pa/ver/'+this.model.id);
        //utils.approuter.navigate(, true);
        return false;
    },
    vistainfo: function () {
        window.open('/bacua/info/#pa/ver/'+this.model.id);
        //utils.approuter.navigate(, true);
        return false;
    },

    eventos: function () {
        utils.approuter.navigate('navegar/proyectos', true);
        return false;
    },

    browse: function () {
        utils.approuter.navigate('navegar/productos', true);
        return false;
    },

    formpacapitulos: function () {
        var self = this,
            productmodel = this.model,
            facet = dao.pacapitulosfacet.init(productmodel),
            form = new Backbone.Form({
                model: facet,
            });
        /*
        form.on('contenido:change', function(form, contenidoEditor) {
            var contenido = contenidoEditor.getValue(),
                newOptions = dao.pasubcontenido[contenido];
            form.fields.subcontenido.editor.setOptions(newOptions);
        });
        */
        form.on('change', function(form, contenidoEditor) {
            var errors = form.commit();
            dao.pacapitulosfacet.getContent();
        });
            

        var modal = new Backbone.BootstrapModal({
            content: form,
            title: 'PA: Alta rÃ¡pida de capÃ­tulos',
            okText: 'aceptar',
            cancelText: 'cancelar',
            animate: false
        });

        modal.open(function(){
            var errors = form.commit();
            productmodel.insertCapitulos(dao.pacapitulosfacet.getContent(),function(){
                self.beforeSave();
                console.log('formcapitulos:productdetails, ready to RELOAD CHAPTERS [%s]','productos/' + productmodel.id);
                self.renderChilds();
                //utils.approuter.navigate('productos/' + productmodel.id, {trigger: true, replace: false});
            });
        });
    }, 

    formnotas: function () {
        var self = this,
            productmodel = this.model,
            facet = dao.notasfacet.init(productmodel),
            form = new Backbone.Form({
                model: facet,
            });

        var modal = new Backbone.BootstrapModal({
            content: form,
            title: 'Alta rÃ¡pida de notas',
            okText: 'guardar',
            cancelText: 'cancelar',
            animate: false
        });

        modal.open(function(){
            var errors = form.commit();
            productmodel.insertNota(dao.notasfacet.getContent(),function(notas){
                console.log('Formnotas:productdetails, CALLBACK OK [%s]', notas.length);
                self.beforeSave();
            });
        });
    }, 

    formpaclasification: function () {
        var self = this,
            facet = dao.paclasificationfacet.init(this.model),
            form = new Backbone.Form({
                model: facet,
            }).render();

        form.on('contenido:change', function(form, contenidoEditor) {
            console.log('onchange:key');
            var contenido = contenidoEditor.getValue(),
                newOptions = dao.pasubcontenido[contenido];
            form.fields.subcontenido.editor.setOptions(newOptions);
        });

        form.on('subcontenido:change', function(form, contenidoEditor) {
            var scontenido = contenidoEditor.getValue();
            console.log('onchange:SUB CONTENIDO key [%s]',scontenido);
        });

        form.on('change', function(form, contenidoEditor) {
            var errors = form.commit();
            console.log('onchange:key errors:[%s]',errors);
            
            self.model.set({'clasification':dao.paclasificationfacet.getContent()});
        });
        $('.paclasifhook').html(form.el);
    }, 

    formaddinstance: function () {
        var self = this,
            facet = dao.addinstancefacet.init(this.model);

        var schema = facet.schema;
        schema.rolinstancia.options = utils.rolinstanciasGroup[facet.get('tipoproducto')];

        var form = new Backbone.Form({
                model: facet,
                schema:schema
            });


        console.log('[%s] formaddinstance BEGINS',self.whoami);
        
        facet.on('change:slug', function(facet, slug) {
            console.log('change slug [%s][%s]',slug, dao.addinstancefacet.getContent().slug);
            form.setValue({slug:slug});
        });
        facet.on('change:tipoarchivo', function(facet, tipo) {
            console.log('change mimetype [%s][%s]',tipo, dao.addinstancefacet.getContent().tipoarchivo);
            form.setValue({tipoarchivo:tipo});
        });

        form.on('tipoproducto:change', function(form, contenidoEditor) {
            form.fields.rolinstancia.editor.setOptions( utils.rolinstanciasGroup[contenidoEditor.getValue()] );
        });

        form.on('change', function(form, editor) {
            var errors = form.commit();
            console.log('change: rolinstancia: [%s]',dao.addinstancefacet.getContent().rolinstancia)
        });

        $('.painstanciahook').html(form.render().el); 
    },

    formintechfacet: function () {
        var self = this;
        var facet = dao.intechfacet.init(this.model);

        var schema = facet.schema;
        schema.rolinstancia.options = utils.rolinstanciasGroup[self.model.get('tipoproducto')];

        var form = new Backbone.Form({
            model: facet,
            schema:schema
            });

        form.on('change', function(form, editor) {
            var errors = form.commit();
            console.log('onchange: errors:[%s]',errors);
            self.model.set({'painstancefacet':dao.intechfacet.getContent()});
        });
        $('.intechfacethook').html(form.render().el);
    }, 

    formparealization: function () {
        var self = this;
        var facet = dao.parealizfacet.init(this.model);
        var form = new Backbone.Form({
            model: facet,
            });

        form.on('change', function(form, editor) {
            var errors = form.commit();
            console.log('onchange: errors:[%s]',errors);
            self.model.set({'realization':dao.parealizfacet.getContent()});
            var instance = dao.parealizfacet.getContent();
            console.log('form: [%s] [%s] [%s]',instance.test, instance.productores, instance.musicos);

        });
        $('.parealizhook').html(form.render().el);
    }, 

    formpatechfacet: function () {
        //console.log('shownodalpatechfacet:roductdetails begin');
        var self = this,
            facet = dao.patechfacet.init(this.model),
            form = new Backbone.Form({
                model: facet
            });

        form.on('change', function(form, editor) {
            var errors = form.commit();
            self.model.set({'patechfacet':dao.patechfacet.getContent()});
        });
        $('.padatosprohook').html(form.render().el);
    }, 

    openpatechfacet: function () {
        //console.log('shownodalpatechfacet:roductdetails begin');
        var self = this;


        var view = new ProductPaTechFacetView( {model: dao.patechfacet.init(this.model)} );
        var modal = new Backbone.BootstrapModal({
            currentmodel: this.model,
            content: view,
            title: 'PA Tech Facet',
            okText: 'aceptar',
            cancelText: 'cancelar',
            animate: true
        });
        modal.open(function(){
            this.options.currentmodel.set({'patechfacet':dao.patechfacet.getContent()});
            self.beforeSave();

        });
        //modal.on('ok', function() {
            //Do some validation etc.
            //console.log('shownodalpatechfacet: OK EVENT');
            //if (!isValid) modal.preventClose();
        //});


        //if(this.model.get('patechfacet')
        //$('#patechcallback').html(new ProductPaTechFacetView({model: dao.patechfacet.init(this.model)}).el);
        //utils.editor.render('nicpanel','quotetext',this.model.get('quote'));
        //return false;
        //durnominal fecreacion cantcapitulos productora
    }, 
});