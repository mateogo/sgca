window.ProductView = Backbone.View.extend({
    /**
     *  Constructor en main.js:
     *        new ProductView({{model: product})
     *
     */
    whoami:'ProductView',

    initialize: function () {
        //alert('ProductView: project:['+ this.project.denom+']');
        this.render();

    },

    render: function () {
        $(this.el).html(this.template(this.model.toJSON()));
        return this;
    },

    /**
     * Scope of events: Events declared in a view use the view’s `el` element to wire up the events. 
     * Since the `el` in this example is being generated by the view, as a `ul` tag, 
     * the click event is wired up to all of the <a> tags in each of the <li> tags.     
    */

    events: {
        "change"            : "change",
        "click .parealiz"   : "formparealization",
        "click .paclasif"   : "formpaclasification",
        "click .pafacet"    : "formpatechfacet",
        "click .capitulos"  : "formpacapitulos",
        "click .save"       : "beforeSave",
        "click .delete"     : "deleteNode",
        "click .clonar"     : "clone",
        "click .browse"     : "browse",
        "click .vista"      : "vista",
    },

    change: function (event) {
        /**
         *  event:
         *   event.target.name: model property
         *   event.target.value: model value
         *   event.target.id model key
         *  
         *   this.model.set( {prop1:newValue1, prop2,newValue2 }  )
         */

        // Remove any existing alert message
        utils.hideAlert();

        // Apply the change to the model
        var target = event.target;
        var change = {};
        change[target.name] = target.value;
        this.model.set(change);
        //utils.showAlert('Success!', 'name:['+target.name+'] value:['+target.value+'] key:['+target.id+']', 'alert-success');

        // Run validation rule (if any) on changed item
        var check = this.model.validateItem(target.id);
        if (check.isValid === false) {
            utils.addValidationError(target.id, check.message);
        } else {
           utils.removeValidationError(target.id);
        }
    },

    beforeSave: function () {
        //console.log('beforeSave:productdetails BEGIN');
        var self = this;
        var check = this.model.validateAll();
        //console.log('beforeSave:productdetails validateAll ok');

        if (check.isValid === false) {
            utils.displayValidationErrors(check.messages);
            return false;
        }

        //console.log('beforeSave:productdetails SAVING NOW');
        this.saveNode();
        return false;
    },

    saveNode: function () {
        console.log('saveNode:productdetails begins');
        var self = this;
        // builds taglist array
        this.model.buildTagList();
        //
        this.model.save(null, {
            success: function (model) {
                //console.log('saveNode:productdetails success');
                self.render();
                app.navigate('productos/' + model.id, false);
                utils.showAlert('Exito!', 'El nodo se actualizó correctamente', 'alert-success');
            },
            error: function () {
                utils.showAlert('Error', 'Ocurrió un error al intentar actualizar este nodo', 'alert-error');
            }
        });
    },

    deleteNode: function () {
        this.model.destroy({
            success: function () {
                alert('El nodo se eliminó correctamente');
                window.history.back();
            }
        });
        return false;
    },

    clone: function () {
        var self = this;
        var check = this.model.validateAll();
        if (check.isValid === false) {
            utils.displayValidationErrors(check.messages);
            return false;
        }
        app.navigate('productos/add', false);
        this.model.unset('id',{ silent : true });
        this.model.unset('_id',{ silent : true });
        this.saveNode();
        return false;
    },

    vista: function () {
        window.open('/producto.html#req/'+this.model.id);
        //utils.approuter.navigate(, true);
        return false;
    },

    browse: function () {
        //utils.productsQueryData().setProject(this.model.get('project')._id,this.model.get('denom'));
        utils.approuter.navigate('navegar/productos', true);
        return false;
    },

  formpacapitulos: function () {
        var self = this,
            productmodel = this.model,
            facet = utils.pacapitulosfacet.init(productmodel),
            form = new Backbone.Form({
                model: facet,
            });
        /*
        form.on('contenido:change', function(form, contenidoEditor) {
            var contenido = contenidoEditor.getValue(),
                newOptions = utils.pasubcontenido[contenido];
            form.fields.subcontenido.editor.setOptions(newOptions);
        });
        */
        var modal = new Backbone.BootstrapModal({
            content: form,
            title: 'PA: Alta rápida de capítulos',
            okText: 'aceptar',
            cancelText: 'cancelar',
            animate: false
        });

        modal.open(function(){
            var errors = form.commit();
            productmodel.insertCapitulos(utils.pacapitulosfacet.getContent());

            //this.options.currentmodel.set({'capitulos':utils.pacapitulosfacet.getContent()});
            //self.beforeSave();
        });
    }, 

  formpaclasification: function () {
        var self = this,
            facet = utils.paclasificationfacet.init(this.model),
            form = new Backbone.Form({
                model: facet,
            });

        form.on('contenido:change', function(form, contenidoEditor) {
            var contenido = contenidoEditor.getValue(),
                newOptions = utils.pasubcontenido[contenido];
            form.fields.subcontenido.editor.setOptions(newOptions);
        });

        var modal = new Backbone.BootstrapModal({
            currentmodel: this.model,
            content: form,
            title: 'PA: Clasificación',
            okText: 'aceptar',
            cancelText: 'cancelar',
            animate: false
        });

        modal.open(function(){
            var errors = form.commit();
            this.options.currentmodel.set({'clasification':utils.paclasificationfacet.getContent()});
            self.beforeSave();
        });
    }, 

  formparealization: function () {
        var self = this;
        var facet = utils.parealizfacet.init(this.model);
        var form = new Backbone.Form({
            model: facet,
            });

        var modal = new Backbone.BootstrapModal({
            currentmodel: this.model,
            content: form,
            title: 'PA: Realizadores',
            okText: 'aceptar',
            cancelText: 'cancelar',
            animate: false
        });
        modal.open(function(){
            var errors = form.commit();
            this.options.currentmodel.set({'realization':utils.parealizfacet.getContent()});
            self.beforeSave();
        });
    }, 

    formpatechfacet: function () {
        //console.log('shownodalpatechfacet:roductdetails begin');
        var self = this;
        var facet = utils.patechfacet.init(this.model);
        var form = new Backbone.Form({
            model: facet,
            //fields:['durnominal','fecreacion','cantcapitulos','productora']
            // fieldsets:[{legend:'Datos',fields:['durnominal','fecreacion']}]

        });

        var modal = new Backbone.BootstrapModal({
            currentmodel: this.model,
            content: form,
            title: 'PA: Ficha Técnica',
            okText: 'aceptar',
            cancelText: 'cancelar',
            animate: true
        });
        modal.open(function(){
            var errors = form.commit();
            this.options.currentmodel.set({'patechfacet':utils.patechfacet.getContent()});
            self.beforeSave();
        });
        //modal.on('ok', function() {
            //Do some validation etc.
            //console.log('shownodalpatechfacet: OK EVENT');
            //if (!isValid) modal.preventClose();
        //});


        //if(this.model.get('patechfacet')
        //$('#patechcallback').html(new ProductPaTechFacetView({model: utils.patechfacet.init(this.model)}).el);
        //utils.editor.render('nicpanel','quotetext',this.model.get('quote'));
        //return false;
        //durnominal fecreacion cantcapitulos productora
    }, 

    openpatechfacet: function () {
        //console.log('shownodalpatechfacet:roductdetails begin');
        var self = this;


        var view = new ProductPaTechFacetView( {model: utils.patechfacet.init(this.model)} );
        var modal = new Backbone.BootstrapModal({
            currentmodel: this.model,
            content: view,
            title: 'PA Tech Facet',
            okText: 'aceptar',
            cancelText: 'cancelar',
            animate: true
        });
        modal.open(function(){
            this.options.currentmodel.set({'patechfacet':utils.patechfacet.getContent()});
            self.beforeSave();

        });
        //modal.on('ok', function() {
            //Do some validation etc.
            //console.log('shownodalpatechfacet: OK EVENT');
            //if (!isValid) modal.preventClose();
        //});


        //if(this.model.get('patechfacet')
        //$('#patechcallback').html(new ProductPaTechFacetView({model: utils.patechfacet.init(this.model)}).el);
        //utils.editor.render('nicpanel','quotetext',this.model.get('quote'));
        //return false;
        //durnominal fecreacion cantcapitulos productora
    }, 
});